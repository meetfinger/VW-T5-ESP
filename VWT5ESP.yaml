esphome:
  name: vwt5esp

esp32:
  board: esp32dev

deep_sleep: #powersaving mechanism
  id: deepsleep
  run_duration: 30s
  sleep_duration: 3min
  
text_sensor: #necessary text sensors
- platform: template
  id: sms_sender
- platform: template
  id: sms_message
- platform: template
  id: caller_id_text_sensor
- platform: template
  id: ussd_message
- platform: template
  id: messagetosend
      

i2c: #necessary for BME280
  sda: 21
  scl: 22

sensor:
  - platform: sim800l # Signal strenght of GPRS
    rssi:
      name: "Sim800L RSSI"
  - platform: adc # battery voltage 
    pin: 34
    id: batteriespannung
    update_interval: 60s
    unit_of_measurement: "V"
    attenuation: auto
    accuracy_decimals: 2
    filters:
      - multiply: 5.583
  - platform: bme280 #outside temp
    address: 0x76
    update_interval: 60s
    temperature:
      id: tempaussen
      oversampling: 1x
    humidity:
      id: feuchteaussen
      oversampling: 1x
  - platform: dht #inside temp
    pin: 14
    temperature:
      id: tempinnen
    humidity:
      id: feuchteinnen
    update_interval: 60s
    model: DHT22_TYPE2  

binary_sensor:
  - platform: gpio # is the aux heater on?
    id: heizungstatus
    pin:
      number: 39


uart: # necessary UART setup for SIM and GPS
  - id: uart_sim
    baud_rate: 9600
    tx_pin: 27
    rx_pin: 26
  - id: uart_gps
    rx_pin: 35
    baud_rate: 9600

# SIM800l Part:    
# receive and send status sms, 
# receive sms or call to turn on heater, 
# receive sms to let gps stay powered to sync time

sim800l: 
  uart_id: uart_sim
  on_sms_received:
    then:
      - lambda: |-
         id(sms_sender).publish_state(sender);
         id(sms_message).publish_state(message);
         id(messagetosend).publish_state(" ");
         id(messagetosend).publish_state( "GPS: " + to_string(id(latitude).state) + " " + to_string(id(longitude).state) + " " + to_string(id(batteriespannung).state) + "V - Heizung: " + to_string(id(heizungstatus).state) + " - Innen: " + to_string(id(tempinnen).state) + " - Aussen: " + to_string(id(tempaussen).state));
      - if:
         condition:
           lambda: 'return ((id(sms_sender).state == "+49123456789" || id(sms_sender).state == "+49123456789") && (id(sms_message).state == "Heizung" || id(sms_message).state == "heizung") );'
         then:
          - lambda: |-
             id(heizungan).turn_on();
      - if:
         condition:
           lambda: 'return ((id(sms_sender).state == "+49123456789" || id(sms_sender).state == "+49123456789") && (id(sms_message).state == "Status" || id(sms_message).state == "status") );'
         then:
          - deep_sleep.prevent: deepsleep
          - switch.turn_on: gpspwr
          - delay: 1min
          - lambda: |-
             id(messagetosend).publish_state(" ");
             id(messagetosend).publish_state( "GPS: " + to_string(id(latitude).state) + " " + to_string(id(longitude).state) + " " + to_string(id(batteriespannung).state) + "V - Heizung: " + to_string(id(heizungstatus).state) + " - Innen: " + to_string(id(tempinnen).state) + " - Aussen: " + to_string(id(tempaussen).state));
          - sim800l.send_sms:
             recipient: !lambda 'return id(sms_sender).state;'
             message: !lambda 'return id(messagetosend).state;'
          - delay: 10s   
          - deep_sleep.allow: 
      - if:
         condition:
           lambda: 'return ((id(sms_sender).state == "+49123456789" || id(sms_sender).state == "+49123456789") && (id(sms_message).state == "Zeit" || id(sms_message).state == "zeit") );'
         then:
          - deep_sleep.prevent: deepsleep
          - switch.turn_on: gpspwr
          - delay: 1min
          - switch.turn_off: gpspwr
          - deep_sleep.allow: deepsleep
  on_incoming_call:
  - lambda: |-
      id(caller_id_text_sensor).publish_state(caller_id); 
      if (id(caller_id_text_sensor).state == "+49123456789" || id(caller_id_text_sensor).state == "+49123456789"){
        id(heizungan).turn_on();
      }
  - delay: 2s
  - sim800l.disconnect  


switch:
  - platform: gpio # necessary sim800l switch
    id: simpwkey
    pin: 4
    restore_mode: ALWAYS_OFF
  - platform: gpio # necessary sim800l switch
    id: simrst
    pin: 5
    restore_mode: ALWAYS_ON
  - platform: gpio # necessary sim800l switch
    id: simpwr
    pin: 23
    restore_mode: ALWAYS_ON
  - platform: gpio # necessary gps power switch
    id: gpspwr
    pin: 3
    restore_mode: ALWAYS_OFF
  - platform: gpio # switch aux heater on
    id: heizungan
    pin: 
      number: 13
    on_turn_on:
      - delay: 250ms
      - switch.turn_off: heizungan
    
      
gps: # GPS part
  uart_id: uart_gps
  latitude:
    id: latitude
  longitude:
    id: longitude

time: # get time from gps, wifi is not availible
  - platform: gps
    id: gpstime
    on_time: # let gps stay on to sync time on initial boot (time is set to 1:00) and every night at 1:00
      - seconds: 10
        minutes: 0, 1, 2
        then: 
          - deep_sleep.prevent: deepsleep
          - switch.turn_on: gpspwr
          - delay: 45s
          - switch.turn_off: gpspwr
          - deep_sleep.allow: deepsleep           


font: # necessary font to display text
  - file: "Comfortaa-Regular.ttf"
    id: fontbig
    size: 60
  - file: "Comfortaa-Regular.ttf"
    id: fontnormal
    size: 25
  - file: "Comfortaa-Regular.ttf"
    id: fontmini
    size: 18

spi: # necessary setup for display
  clk_pin: 18
  mosi_pin: 19
  
display:
  - platform: waveshare_epaper
    id: einkdisplay
    cs_pin: 32
    dc_pin: 33
    reset_pin: 25
    model: 1.54inv2
    rotation: 90°
    update_interval: 200ms
    full_update_every: 60
    reset_duration: 2ms
    lambda: |-
      it.printf(5, 30, id(fontnormal), "In:");
      it.printf(175, 10, id(fontbig), TextAlign::TOP_RIGHT, "%.1f", id(tempinnen).state);
      it.printf(175, 52, id(fontmini), "°C");
      it.printf(145, 65, id(fontnormal), "%.0f%%", id(feuchteinnen).state);
      it.printf(5, 120, id(fontnormal), "Out:");
      it.printf(175, 90, id(fontbig), TextAlign::TOP_RIGHT, "%.1f", id(tempaussen).state);
      it.printf(175, 132, id(fontmini), "°C");
      it.printf(145, 145, id(fontnormal), "%.0f%%", id(feuchteaussen).state);
      it.strftime(30, 182, id(fontmini), "%H:%M", id(gpstime).now());
      it.printf(200, 180, id(fontmini), TextAlign::TOP_RIGHT, "%.2fV", id(batteriespannung).state);
